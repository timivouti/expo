version: 2.1

orbs:
  job-status-change: expo/job-status-change@1.0.11
  slack-job-status-notification: expo/slack-job-status-notification@1.0.6
  shallow-checkout: expo/shallow-checkout@1.0.2

commands:
  conditionally_halt:
    description: 'Stop the job when there are no active changes in the branch. However, the master branch not affected.'
    parameters:
      exclude:
        description: 'The job will halt if no files other than those matching the given regex have been modified'
        type: string
        # Exclude nothing
        default: '$^'
      requireOneOf:
        description: 'The job will halt if no file matching the given regex has been modified'
        type: string
        # Require anything
        default: '.*'
      search_depth:
        description: 'The maximum directory depth to search'
        type: integer
        # Just top-level directories and files
        default: 0
    steps:
      - run:
          name: Stop the job if only << parameters.exclude >> was changed
          command: |

            ROOT_BRANCH="master"
            SEARCH_DEPTH=<< parameters.search_depth >>
            if [ $CIRCLE_BRANCH = $ROOT_BRANCH ]; then
              echo " ▶️  Running on ${CIRCLE_BRANCH}. Continuing the job..."
              # Required for circleci/node:latest-browsers
              set +e
              exit 0
            fi

            echo " ▶️  Searching for the base commit of ${CIRCLE_BRANCH} and ${ROOT_BRANCH} ..."

            # merge-base can exit with code 1, so we ignore when it fails.
            BASE_COMMIT=$(git merge-base $CIRCLE_BRANCH $ROOT_BRANCH || :)
            while [ -z $BASE_COMMIT ]; do
              git fetch --deepen=2 origin $CIRCLE_BRANCH $ROOT_BRANCH
              BASE_COMMIT=$(git merge-base $CIRCLE_BRANCH $ROOT_BRANCH || :)
            done

            echo "Checking for changes in branch ${CIRCLE_BRANCH}"
            echo " - Excluding << parameters.exclude >>"
            echo " - Requiring << parameters.requireOneOf >>"
            echo " - Depth $SEARCH_DEPTH"
            echo " - Git repository root at ${CIRCLE_WORKING_DIRECTORY}"
            echo " - Base ${ROOT_BRANCH} commit ${BASE_COMMIT}"

            # Test all top-level files and directories
            if ! find $PWD/* -maxdepth $SEARCH_DEPTH | while read file ; do
              baseFileHash=$(git log -1 "${BASE_COMMIT}" --format=format:%H --full-diff "${file}")
              currentFileHash=$(git log -1 --format=format:%H --full-diff "${file}")
              if ! [[ $file =~ << parameters.exclude >> ]]; then
                if [[ $file =~ << parameters.requireOneOf >> ]]; then
                  echo " ++ [required] ${file}"
                  if [ ! $baseFileHash = $currentFileHash ]; then
                    echo " --- ▶️ ${file}/ has been modified on this branch. Continuing the job..."
                    set +e
                    exit 1
                  fi
                fi
              else
                echo " -- [excluded] ${file}"
              fi
            done; then
              set +e
              exit 0
            fi

            echo "⏹ No relevant file changes in the current branch; stopping tests."

            # circleci-agent is not available with nix executors
            if command -v circleci-agent >/dev/null; then
              circleci-agent task halt
            else
              echo 'user-halt' > "$CIRCLE_INTERNAL_SCRATCH/HALT_TASK"
            fi
  halt_if_unchanged:
    parameters:
      requireOneOf:
        description: 'The job will stop if there are no changes in this directory'
        type: string
    steps:
      - run:
          name: Require the << parameters.requireOneOf >> directory to have changes
          command: |

            ROOT_BRANCH="master"

            if [ $CIRCLE_BRANCH = $ROOT_BRANCH ]; then
              echo " ▶️  Running on ${CIRCLE_BRANCH}. Continuing the job..."
              # Required for circleci/node:latest-browsers
              set +e
              exit 0
            fi

            echo " ▶️  Searching for the base commit of ${CIRCLE_BRANCH} and ${ROOT_BRANCH} ..."

            # merge-base can exit with code 1, so we ignore when it fails.
            BASE_COMMIT=$(git merge-base $CIRCLE_BRANCH $ROOT_BRANCH || :)
            while [ -z $BASE_COMMIT ]; do
              git fetch --deepen=2 origin $CIRCLE_BRANCH $ROOT_BRANCH
              BASE_COMMIT=$(git merge-base $CIRCLE_BRANCH $ROOT_BRANCH || :)
            done

            echo "Checking for changes in branch ${CIRCLE_BRANCH}"
            echo " - Required << parameters.requireOneOf >>"
            echo " - Git repository root at ${CIRCLE_WORKING_DIRECTORY}"
            echo " - Base ${ROOT_BRANCH} commit ${BASE_COMMIT}"
            # Test all top-level directories
            for file in $PWD/*/
            do
              FILE_NAME=$(basename $file)
              if [[ " << parameters.requireOneOf >> " =~ " ${FILE_NAME} " ]]; then
                echo " -- Checking ${FILE_NAME}"
                baseFileHash=$(git log -1 "${BASE_COMMIT}" --format=format:%H --full-diff "${file}")
                currentFileHash=$(git log -1 --format=format:%H --full-diff "${file}")
                if [ ! $baseFileHash = $currentFileHash ]; then
                  echo " --- ▶️ ${FILE_NAME}/ has been modified on this branch. Continuing the job..."
                  set +e
                  exit 0
                fi
              fi
            done

            echo "⏹ No relevant file changes in the current branch; stopping tests."

            # circleci-agent is not available with nix executors
            if command -v circleci-agent >/dev/null; then
              circleci-agent task halt
            else
              echo 'user-halt' > "$CIRCLE_INTERNAL_SCRATCH/HALT_TASK"
            fi

  install_nix:
    steps:
      - run: curl https://nixos.org/releases/nix/nix-2.1.2/install | bash -s -- --no-daemon
      - run: echo ". ~/.nix-profile/etc/profile.d/nix.sh" >> ~/.bash_profile
  setup:
    steps:
      - run:
          name: Install common packages
          # curl: slack sends notifications
          # direnv: configures environment with .envrc files
          # findutils: where, find, etc. for expo-module test
          # git: circleci checkout steps
          # gnugrep: used in .envrc
          # gnutar: used by nix commands which download channels
          # gzip: used by nix commands which download channels
          # jq: used to format and parse json
          # openssh: circleci checkout steps
          # rsync: expo-module-scripts uses to copy template files
          # xz: circleci checkout steps
          command: |
            nix-env -iA \
              nixpkgs.curl \
              nixpkgs.direnv \
              nixpkgs.findutils \
              nixpkgs.git \
              nixpkgs.gnugrep \
              nixpkgs.gnutar \
              nixpkgs.gzip \
              nixpkgs.jq \
              nixpkgs.openssh \
              nixpkgs.rsync \
              nixpkgs.xz
      - run: mkdir -p ~/.config/direnv
      - run: echo -e "[whitelist]\nprefix = [ \"$HOME\" ]" > ~/.config/direnv/config.toml
      - run: echo 'eval "$(direnv export bash)"' >> ~/.bash_profile
      - run: echo '--frozen-lockfile true' >> ~/.yarnrc
      - shallow-checkout/checkout
      - job-status-change/prepare
  decrypt_secrets_if_possible:
    steps:
      - run:
          name: Decrypt secrets
          command: |
            if [[ ${EXPO_GIT_CRYPT_KEY_BASE64:-unset} = unset ]]; then
              echo 'git-crypt key not present in environment' && exit 0
            fi
            git crypt unlock <(echo $EXPO_GIT_CRYPT_KEY_BASE64 | base64 --decode)
  # Prevent native tests from running when docs is the only directory that was edited
  guard_sdk_tests:
    steps:
      - conditionally_halt:
          # Exclude .git/, node_modules,THIRD-PARTY-LICENSES, LICENSE, docs/, guides/, template-files/, templates/, and every `.md` file
          exclude: '^(.*)(\/(.git\/|LICENSE|THIRD-PARTY-LICENSES|node_modules|docs|guides|scripts|template-files|templates).*|\.md$)'
  update_submodules:
    steps:
      - run:
          name: Update submodules
          command: git submodule update --init
  fetch_cocoapods_specs:
    steps:
      - run:
          name: Fetch CocoaPods
          command: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
  git_lfs_pull:
    steps:
      - restore_cache:
          keys:
            - gitlfs-{{ arch }}
            - gitlfs
      - run:
          name: Pull Git LFS files
          command: git lfs pull
      - save_cache:
          key: gitlfs-{{ arch }}
          paths:
            # Save the LFS cache directory to save GitHub bandwidth
            - .git/lfs
  restore_yarn_cache:
    parameters:
      working_directory:
        type: string
        default: .
    steps:
      - restore_cache:
          key: yarn-v1-{{ arch }}-{{ checksum "<< parameters.working_directory >>/yarn.lock" }}
  save_yarn_cache:
    parameters:
      working_directory:
        type: string
        default: .
    steps:
      - save_cache:
          key: yarn-v1-{{ arch }}-{{ checksum "<< parameters.working_directory >>/yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
            - ~/Library/Caches/Yarn
  restore_gradle_cache:
    steps:
      - restore_cache:
          key: jars-v1-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
  save_gradle_cache:
    steps:
      - save_cache:
          key: jars-v1-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
          paths:
            - ~/.gradle
  yarn:
    parameters:
      command:
        type: string
        default: install
      working_directory:
        type: string
      max_tries:
        type: integer
        default: 1
    steps:
      - run:
          name: yarn << parameters.command >> (<< parameters.working_directory >>)
          working_directory: << parameters.working_directory >>
          command: for i in {1..<< parameters.max_tries >>}; do ((i > 1)) && sleep 5; yarn << parameters.command >> && break; done
  yarn_install:
    parameters:
      working_directory:
        type: string
    steps:
      - yarn:
          command: 'install'
          working_directory: << parameters.working_directory >>
          max_tries: 5
  yarn_restore_and_install:
    parameters:
      working_directory:
        type: string
    steps:
      - restore_yarn_cache:
          working_directory: << parameters.working_directory >>
      - yarn_install:
          working_directory: << parameters.working_directory >>
      - save_yarn_cache:
          working_directory: << parameters.working_directory >>

executors:
  # We add -l to all the shell commands to make it easier to use direnv
  nix: &nix
    docker:
      - image: lnl7/nix:2.1.2
    # Symlink to the readline-enabled bash which is the default command of the container
    shell: /run/current-system/sw/bin/bash -leo pipefail
    working_directory: /root/expo
    environment:
      # fastlane complains if these are not set
      LANG: en_US.UTF-8
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FASTLANE_DISABLE_COLORS: 1
      CI: 1
  android:
    <<: *nix
    resource_class: xlarge
  js:
    <<: *nix
    resource_class: small
  web:
    docker:
      - image: circleci/node:latest-browsers
    shell: /bin/bash -leo pipefail
    working_directory: /home/circleci/expo
    resource_class: small
    environment:
      USER: circleci
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '11.0.0'
    working_directory: /Users/distiller/project
    shell: /bin/bash -leo pipefail
    environment:
      # Homebrew settings
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      # fastlane complains if these are not set
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FASTLANE_DISABLE_COLORS: 1
      CI: 1
      # Prevent automatic download of LFS files
      GIT_LFS_SKIP_SMUDGE: 1

workflows:
  # docs:
  #   jobs:
  #     - docs
  #     - docs_approve_deploy:
  #         type: approval
  #         requires:
  #           - docs
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - /.*all-ci.*/
  #     - docs_deploy:
  #         requires:
  #           - docs_approve_deploy
  # JavaScript packages that make up the SDK
  # sdk:
  #   jobs:
  #     - expo_sdk
  #     # E2E SDK testing
  #     - web_test_suite
  #     - ios_test_suite

  # Android and iOS clients
  client:
    jobs:
      # - home
      # - expotools
      # - client_android
      # - client_ios
      # Disabled until further notice
      # See https://exponent-internal.slack.com/archives/C1QNF5L3C/p1576852692010900
      # - test_suite_publish
      # - android_test_suite:
      #     requires:
      #       - test_suite_publish
      - android_unit_tests
      # - client_android_approve_google_play:
      #     type: approval
      #     requires:
      #       - client_android
      #     filters:
      #       branches:
      #         only:
      #           - /sdk-\d+/
      #           - /.*all-ci.*/
      # - client_android_release_google_play:
      #     requires:
      #       - client_android_approve_google_play
      # - client_android_apk_release_approve:
      #     type: approval
      #     requires:
      #       - client_android
      #     filters:
      #       branches:
      #         only:
      #           - /.*sdk-\d+/
      #           - /.*all-ci.*/
      # - client_android_apk_release:
      #     requires:
      #       - client_android_apk_release_approve
      # - client_ios_simulator_release_approve:
      #     type: approval
      #     requires:
      #       - client_ios
      #     filters:
      #       branches:
      #         only:
      #           - /.*sdk-\d+/
      #           - /.*all-ci.*/
      # - client_ios_simulator_release:
      #     requires:
      #       - client_ios_simulator_release_approve

  shell_app:
    jobs:
      - shell_app_ios_approve_build:
          type: approval
          filters:
            branches:
              only:
                - /sdk-\d+/
                - /.*all-ci.*/
      - shell_app_ios_build:
          upload: true
          requires:
            - shell_app_ios_approve_build
      - shell_app_android_approve_build:
          type: approval
          filters:
            branches:
              only:
                - /sdk-\d+/
                - /.*all-ci.*/
      - shell_app_android_build:
          requires:
            - shell_app_android_approve_build
  client_shell_app:
    jobs:
      - expo_client_approve_build:
          type: approval
          filters:
            branches:
              only:
                - /sdk-\d+/
                - /.*all-ci.*/
      - expo_client_build:
          requires:
            - expo_client_approve_build
  shell_app_nightly:
    triggers:
      - schedule:
          cron: '20 5 * * 2,4,6'
          filters:
            branches:
              only:
                - master
    jobs:
      - shell_app_ios_build:
          upload: false

jobs:
  expo_sdk:
    executor: js
    steps:
      - setup
      - conditionally_halt:
          # Exclude (include anything except) .git/, node_modules,THIRD-PARTY-LICENSES, LICENSE, docs/, guides/, template-files/, templates/, and every `.md` file
          exclude: '^(.*)(\/(.git\/|LICENSE|THIRD-PARTY-LICENSES|node_modules|docs|apps|guides|scripts|template-files|templates).*|\.md$)'
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - run:
          name: Check packages
          command: expotools check-packages
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_API_WEBHOOK

  web_test_suite:
    executor: web
    steps:
      - install_nix
      - setup
      - guard_sdk_tests
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: test:web
          working_directory: ~/expo/apps/bare-expo
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_WEB_WEBHOOK

  home:
    executor: js
    steps:
      - setup
      - guard_sdk_tests
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/home
      - yarn:
          command: lint
          working_directory: ~/expo/home
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_API_WEBHOOK

  expotools:
    executor: js
    steps:
      - setup
      - guard_sdk_tests
      - yarn_restore_and_install:
          working_directory: ~/expo/tools/expotools
      - yarn:
          command: tsc
          working_directory: ~/expo/tools/expotools

  ios_test_suite:
    executor: mac
    #parallelism: 8
    steps:
      - install_nix
      - setup
      - guard_sdk_tests
      - update_submodules

      # Simulators are more likely to fail. Try them first
      - run:
          name: Pull Detox
          working_directory: ~/project/apps/bare-expo
          command: brew tap wix/brew
      - run:
          name: Install iOS simulators
          working_directory: ~/project/apps/bare-expo
          command: brew install applesimutils
      - run:
          name: Install Watchman
          working_directory: ~/project/apps/bare-expo
          command: brew install watchman

      ## Yarn takes a while to run
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/project
      - save_yarn_cache

      ## Detox
      - run:
          name: Clean Detox
          working_directory: ~/project/apps/bare-expo
          command: yarn detox:clean
      - run:
          name: Build iOS project for Detox
          working_directory: ~/project/apps/bare-expo
          command: yarn ios:detox:build:release
      - run:
          name: Run tests
          working_directory: ~/project/apps/bare-expo
          command: yarn ios:detox:test:release
          # Store images of build failures
      - store_artifacts:
          path: ~/project/apps/bare-expo/artifacts
          # command: circleci tests glob "__e2e__/*.test.js" | circleci tests split --split-by=timings | xargs -n 1 yarn ci:detox-test-release --cleanup -f --workers=8
          # environment:
          #   JEST_JUNIT_OUTPUT: ./__e2e__/results/jest/results.xml
      # - store_test_results:
      # path: ~/project/apps/bare-expo/__e2e__/results

      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_IOS_WEBHOOK

  client_ios:
    executor: mac
    steps:
      - install_nix
      - setup
      - guard_sdk_tests
      - update_submodules
      - git_lfs_pull
      - decrypt_secrets_if_possible
      - run:
          name: Generate dynamic macros
          command: expotools ios-generate-dynamic-macros
      - run:
          name: Build
          command: nix run expo.procps --command fastlane ios create_simulator_build
      - save_cache:
          key: client-ios-simulator-{{ .Revision }}
          paths:
            - ~/project/ios/simulator-build
      - store_artifacts:
          path: ~/Library/Logs/fastlane/
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_IOS_WEBHOOK

  client_ios_simulator_release:
    executor: mac
    steps:
      - install_nix
      - setup
      - update_submodules
      - git_lfs_pull
      - decrypt_secrets_if_possible
      - yarn_restore_and_install:
          working_directory: ~/project/tools/expotools
      - restore_cache:
          key: client-ios-simulator-{{ .Revision }}
      - run: expotools client-build --platform ios --release

  expo_client_build:
    executor: mac
    steps:
      - install_nix
      - setup
      - guard_sdk_tests
      - update_submodules
      - git_lfs_pull
      - fetch_cocoapods_specs
      - run:
          name: Generate dynamic macros
          # Remove GoogleServices-Info because it has been stripped of all our secret keys
          # Will be generated later in the build process if the user provides their own ios.googleServicesFile
          command: expotools ios-generate-dynamic-macros --skip-template=GoogleService-Info.plist
      - run:
          name: Build Expo Client and upload tarball
          command: |
            export TARBALL=ios-expo-client-$CIRCLE_SHA1.tar.gz
            fastlane ios create_expo_client_build
            tar \
              -C ~/project \
              -zcf "/tmp/$TARBALL" \
              expo-client-build/Exponent.xcarchive \
              ios
            ~/project/bin/aws s3 cp --acl public-read "/tmp/$TARBALL" s3://exp-artifacts
      - run:
          name: Expo Client shell app url
          command: echo "Expo Client shell app tarball uploaded to s3://exp-artifacts/ios-expo-client-$CIRCLE_SHA1.tar.gz"

  shell_app_ios_build:
    executor: mac
    parameters:
      upload:
        type: boolean
        default: true
    steps:
      - install_nix
      - setup
      - guard_sdk_tests
      - update_submodules
      - git_lfs_pull
      - fetch_cocoapods_specs
      - yarn_install:
          working_directory: ~/project/tools-public
      - run:
          name: Generate dynamic macros
          command: expotools ios-generate-dynamic-macros
      - run: echo "--run.cwd project/tools-public" >> ~/.yarnrc
      - run:
          name: Build iOS shell app for real devices
          working_directory: ~/project/tools-public
          no_output_timeout: 30m
          command: nix run expo.procps --command gulp ios-shell-app --action build --type archive --verbose true --skipRepoUpdate --shellAppSdkVersion UNVERSIONED
      - run:
          name: Build iOS shell app for simulators
          working_directory: ~/project/tools-public
          no_output_timeout: 30m
          command: nix run expo.procps --command gulp ios-shell-app --action build --type simulator --verbose true --skipRepoUpdate --shellAppSdkVersion UNVERSIONED
      - when:
          condition: << parameters.upload >>
          steps:
            - run:
                name: Package and upload release tarball
                working_directory: ~/project
                no_output_timeout: 40m
                command: |
                  export TARBALL=ios-shell-builder-sdk-latest-$CIRCLE_SHA1.tar.gz
                  tar \
                    -zcf "/tmp/$TARBALL" \
                    package.json \
                    exponent-view-template \
                    shellAppBase-builds \
                    shellAppWorkspaces \
                    ios
                  ~/project/bin/aws s3 cp --acl public-read "/tmp/$TARBALL" s3://exp-artifacts
                  echo "Release tarball uploaded to s3://exp-artifacts/$TARBALL"
                  echo "You can deploy this by updating or creating a new file in https://github.com/expo/turtle/tree/master/shellTarballs/ios"
                  echo "Then follow the deployment instructions: https://github.com/expo/turtle-deploy"

  shell_app_android_build:
    executor: android
    steps:
      - setup
      - run: echo 'export S3_URI=s3://exp-artifacts/android-shell-builder-$CIRCLE_SHA1.tar.gz' >> $BASH_ENV
      - decrypt_secrets_if_possible
      - yarn_install:
          working_directory: ~/expo/tools-public
      - yarn_install:
          working_directory: ~/expo/tools
      - yarn_restore_and_install:
          working_directory: ~/expo/tools/expotools
      - run:
          name: Check that Android packages are up-to-date
          command: expotools check-android-packages
      - run: |
          aws s3 ls $S3_URI || {
            ./buildAndroidTarballLocally.sh # TODO: put in fastlane?
            aws s3 cp --acl public-read artifacts/android-shell-builder.tar.gz $S3_URI
          }
          echo "Release tarball uploaded to $S3_URI"
          echo "You can deploy this by updating or creating a new file in https://github.com/expo/turtle/tree/master/shellTarballs/android"
          echo "Then follow the deployment instructions: https://github.com/expo/turtle-deploy"

  # Disabled until further notice
  # See https://exponent-internal.slack.com/archives/C1QNF5L3C/p1576852692010900
  #   android_test_suite:
  #     executor: android
  #     steps:
  #       - setup
  #       - guard_sdk_tests
  #       - update_submodules
  #       - yarn_install:
  #           working_directory: ~/expo # need jsc-android dependency in expokit-npm-package
  #       - yarn_install:
  #           working_directory: ~/expo/tools-public
  #       - restore_gradle_cache
  #       - run:
  #           name: Build APK, upload to Device Farm, follow device logs
  #           command: |
  #             nix-shell android/shell.nix --pure \
  #               --keep AWS_ACCESS_KEY_ID \
  #               --keep AWS_SECRET_ACCESS_KEY \
  #               --keep SSL_CERT_FILE \
  #               --keep FASTLANE_SKIP_UPDATE_CHECK \
  #               --keep FASTLANE_DISABLE_COLORS \
  #               --keep CI \
  #               --run "fastlane android devicefarm"
  #       - save_gradle_cache

  client_android:
    executor: android
    steps:
      - setup
      - guard_sdk_tests
      - update_submodules
      - yarn_install:
          working_directory: ~/expo # need jsc-android dependency in expokit-npm-package
      - yarn_install:
          working_directory: ~/expo/tools-public
      - restore_gradle_cache
      - decrypt_secrets_if_possible
      - run:
          name: Decode release keystore
          command: echo $ANDROID_KEYSTORE_B64 | base64 -d > android/app/release-key.jks
      - run:
          name: Build APK
          command: |
            nix-shell android/shell.nix --pure \
              --keep ANDROID_KEYSTORE_PASSWORD \
              --keep ANDROID_KEY_ALIAS \
              --keep ANDROID_KEY_PASSWORD \
              --keep FASTLANE_SKIP_UPDATE_CHECK \
              --keep FASTLANE_DISABLE_COLORS \
              --keep CI \
              --run "fastlane android build build_type:Release"
      - save_gradle_cache
      - save_cache:
          key: client-android-apk-{{ .Revision }}
          paths:
            - ~/expo/android/app/build/outputs/apk
      - store_artifacts:
          path: ~/expo/android/app/build/outputs/apk
      - store_artifacts: # daemon logs for debugging crashes
          path: ~/.gradle/daemon
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_ANDROID_WEBHOOK

  android_unit_tests:
    executor: android
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - restore_gradle_cache
      - run:
          name: Android Unit tests
          command: nix-shell android/shell.nix --run "expotools android-unit-tests"
          working_directory: ~/expo
      - save_gradle_cache
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/expo/packages/.*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
          working_directory: ~
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  client_android_apk_release:
    executor: js
    steps:
      - setup
      - update_submodules
      - decrypt_secrets_if_possible
      - yarn_restore_and_install:
          working_directory: ~/expo/tools/expotools
      - restore_cache:
          key: client-android-apk-{{ .Revision }}
      - run: expotools client-build --platform android --release

  client_android_release_google_play:
    executor: js
    steps:
      - setup
      - restore_cache:
          key: client-android-apk-{{ .Revision }}
      - run:
          name: Decode release keystore
          command: echo $ANDROID_KEYSTORE_B64 | base64 -d > android/app/release-key.jks
      - run:
          name: Upload APK to Google Play and release to production
          working_directory: ~/expo
          command: fastlane android prod_release

  docs:
    executor: nix
    resource_class: xlarge # TODO: Use less than 8Gib of ram to build a static site
    steps:
      - setup
      - halt_if_unchanged:
          requireOneOf: 'docs'
      - update_submodules
      - yarn_install:
          working_directory: docs
      - run:
          name: Run Danger
          working_directory: docs
          command: yarn danger ci
      - yarn:
          command: export
          working_directory: docs
      - run:
          name: Export server
          working_directory: docs
          command: yarn run export-server
          background: true
      - run:
          name: Test links
          working_directory: docs
          command: nix run expo.curl --command yarn run test-links http://localhost:8000
      - save_cache:
          key: docs-site-{{ .Revision }}
          paths:
            - docs/out
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master
          slack_webhook: $SLACK_DOCS_WEBHOOK

  docs_deploy:
    executor: nix
    steps:
      - setup
      - restore_cache:
          keys:
            - docs-site-{{ .Revision }}
      - deploy:
          command: ./deploy.sh
          working_directory: docs
# Disabled until further notice
# See https://exponent-internal.slack.com/archives/C1QNF5L3C/p1576852692010900
#   test_suite_publish:
#     executor: nix
#     steps:
#       - setup
#       - conditionally_halt:
#           # Exclude .git/, node_modules,THIRD-PARTY-LICENSES, LICENSE, docs/, guides/, template-files/, templates/, native-component-list/, bare-expo/, and every `.md` file
#           exclude: '^(.*)(\/(.git\/|LICENSE|THIRD-PARTY-LICENSES|node_modules|docs|guides|scripts|template-files|templates|native-component-list|bare-expo).*|\.md$)'
#           search_depth: 1
#       - update_submodules
#       - decrypt_secrets_if_possible
#       - run:
#           name: Publish
#           working_directory: ~/expo/apps/test-suite
#           command: ./publish.sh
